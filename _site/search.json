[
 
    {
      "title"    : "Why do software developers use static analysis tools? A user-centered study of developer needs and motivations",
      "title-lower"    : "why do software developers use static analysis tools? a user-centered study of developer needs and motivations",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsindustry-surveyuser-study",
      "venue" : "TSE",
      "authors" : "Lisa Nguyen Quang Do, James R. Wright, Karim Ali",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-why-do-swes.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "As increasingly complex software is developed every day, a growing number of companies use static analysis tools to reason about program properties ranging from simple coding style rules to more advanced software bugs, to multi-tier security vulnerabilities. While increasingly complex analyses are created, developer support must also be updated to ensure that the tools are used to their best potential. Past research in the usability of static analysis tools has primarily focused on usability issues encountered by software developers, and the causes of those issues in analysis tools. In this article, we adopt a more user-centered approach, and aim at understanding why software developers use analysis tools, which decisions they make when using those tools, what they look for when making those decisions, and the motivation behind their strategies. This approach allows us to derive new tool requirements that closely support software developers (e.g., systems for recommending warnings to fix that take developer knowledge into account), and also open novel avenues for further static-analysis research such as collaborative user interfaces for analysis warnings."
    } ,
  
    {
      "title"    : "Explaining static analysis with rule graphs",
      "title-lower"    : "explaining static analysis with rule graphs",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsexplainabilityMUDARRI",
      "venue" : "TSE",
      "authors" : "Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-rule-graphs.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "As static data-flow analysis becomes able to report increasingly complex bugs, using an evergrowing set of complex internal rules encoded into flow functions, the analysis tools themselves grow more and more complex. In result, for users to be able to effectively use those tools on specific codebases, they require special configurations—a task which in industry is typically performed by individual developers or dedicated teams. To efficiently use and configure static analysis tools, developers need to build a certain understanding of the analysis’ rules, i.e., how the underlying analyses interpret the analyzed code and their reasoning for reporting certain warnings."
    } ,
  
    {
      "title"    : "Designing UIs for static analysis tools: evaluating tool design guidelines with SWAN",
      "title-lower"    : "designing uis for static analysis tools: evaluating tool design guidelines with swan",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsperspective",
      "venue" : "CACM",
      "authors" : "Daniil Tiganov, Lisa Nguyen Quang Do, Karim Ali",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-cacm.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "This article explores the effect of applying a user-centered approach to SWAN, a security-focused static-analysis tool for the Swift programming language. SWAN is being actively developed to feature better integration into the Swift development workflow. Our goal is to evaluate the effectiveness of the approach and guidelines for improving the usability of the next version of SWAN."
    } ,
  
    {
      "title"    : "Proceedings of the 10th ACM SIGPLAN international workshop on the state of the art in program analysis",
      "title-lower"    : "proceedings of the 10th acm sigplan international workshop on the state of the art in program analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsproceedings",
      "venue" : "SOAP",
      "authors" : "Lisa Nguyen Quang Do, Caterina Urban",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-soap.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "The 10th ACM SIGPLAN International Workshop on the State Of the Art in Program Analysis (SOAP’21) is co-located with the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation (PLDI ‘21). In line with past workshops, SOAP’21 aims to bring together the members of the program analysis community to share new developments and shape new innovations in program analysis."
    } ,
  
    {
      "title"    : "Why can&#39;t johnny fix vulnerabilities: a usability evaluation of static analysis tools for security",
      "title-lower"    : "why can&#39;t johnny fix vulnerabilities: a usability evaluation of static analysis tools for security",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsheuristic-walkthrough",
      "venue" : "USENIX",
      "authors" : "Justin Smith, Lisa Nguyen Quang Do, Emerson Murphy-Hill",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-johnny.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static analysis tools can help prevent security incidents, but to do so, they must enable developers to resolve the defects they detect. Unfortunately, developers often struggle to interact with the interfaces of these tools, leading to tool abandonment, and consequently the proliferation of preventable vulnerabilities. Simply put, the usability of static analysis tools is crucial."
    } ,
  
    {
      "title"    : "Debugging static analysis",
      "title-lower"    : "debugging static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationssurveyuser-studyVisuFlow",
      "venue" : "TSE",
      "authors" : "Lisa Nguyen Quang Do, Stefan Krüger, Patrick Hill, Karim Ali, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-debugging.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static analysis is increasingly used by companies and individual code developers to detect and fix bugs and security vulnerabilities. As programs grow more complex, the analyses have to support new code concepts, frameworks and libraries. However, static-analysis code itself is also prone to bugs. While more complex analyses are written and used in production systems every day, the cost of debugging and fixing them also increases tremendously."
    } ,
  
    {
      "title"    : "Explaining static analysis – a perspective",
      "title-lower"    : "explaining static analysis – a perspective",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsexplainability",
      "venue" : "EXPLAIN",
      "authors" : "Marcus Nachtigall, Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-perspective.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static code analysis is widely used to support the development of high-quality software. It helps developers detect potential bugs and security vulnerabilities in a program’s source code without executing it. While the potential benefits of static analysis tools are beyond question, their usability is often criticised and prevents software developers from using static analysis to its full potential. In the past decade, researchers have studied developer needs and contrasted them to available static analysis tool functionalities. In this paper, we summarize the main design challenges for building usable static analysis tools, and show that they revolve around the notion of explainability, which is a subarea of usability. We present existing analysis tools and current research in static analysis usability, and detail how they approach those challenges. This leads us to proposing potential lines of future work in explainability for static analysis, namely turning static analysis tools into assistants and teachers."
    } ,
  
    {
      "title"    : "SwanAssist: semi-automated detection of code-specific, security-relevant methods",
      "title-lower"    : "swanassist: semi-automated detection of code-specific, security-relevant methods",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsconfiguration",
      "venue" : "ASE Demo",
      "authors" : "Goran Piskachev, Lisa Nguyen Quang Do, Oshando Johnson, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-swanassist.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "To detect specific types of bugs and vulnerabilities, static analysis tools must be correctly configured with security-relevant methods (Srm), e.g., sources, sinks, sanitizers and authentication methods—usually a very labour-intensive and error-prone process. This work presents the semi-automated tool SWANAssist, which aids the configuration with an IntelliJ plugin based on active machine learning. It integrates our novel automated machine-learning approach SWAN, which identifies and classifies Java Srm. SWANAssist further integrates user feedback through iterative learning. SWANAssist aids developers by asking them to classify at each point in time exactly those methods whose classification best impact the classification result. Our experiments show that SWANAssist classifies Srm with a high precision, and requires a relatively low effort from the user."
    } ,
  
    {
      "title"    : "Doctoral thesis – User-centered tool design for data-flow analysis",
      "title-lower"    : "doctoral thesis – user-centered tool design for data-flow analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsthesis",
      "venue" : "Paderborn university",
      "authors" : "Lisa Nguyen Quang Do",
      "awards" : "Summa cum laude, UPB doctoral dissertation award, Zonta club Paderborn award",
      "tags"     : "",
      "url"      : "/publication-thesis.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "In the past decades, static analysis tools have been known to have specific user-experience issues such as a high number of false positives, a lack of responsiveness, or the poor warning descriptions that they provide. Their increasing use in industry makes those issues more relevant, especially as static analysis tools become more powerful, detect more complex bugs and vulnerabilities, and support an increasing number of languages, third-party libraries and coding concepts. The way in which an analysis interprets the code it analyzes may differ from how the developer views the analyzed code, causing major user-experience issues such as warning misunderstandings or wrong fixes."
    } ,
  
    {
      "title"    : "Codebase-adaptive detection of security-relevant methods",
      "title-lower"    : "codebase-adaptive detection of security-relevant methods",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsconfigurationMLSWAN",
      "venue" : "ISSTA",
      "authors" : "Goran Piskachev, Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "Artifact evaluated",
      "tags"     : "",
      "url"      : "/publication-swan.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "More and more companies use static analysis to perform regular code reviews to detect security vulnerabilities in their code, configuring them to detect various types of bugs and vulnerabilities such as the SANS top 25 or the OWASP top 10. For such analyses to be as precise as possible, they must be adapted to the code base they scan. The particular challenge we address in this paper is to provide analyses with the correct security-relevant methods (Srm): sources, sinks, etc."
    } ,
  
    {
      "title"    : "Codebase-adaptive detection of security-relevant methods (TR)",
      "title-lower"    : "codebase-adaptive detection of security-relevant methods (tr)",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsconfigurationMLSWAN",
      "venue" : "Tech report",
      "authors" : "Goran Piskachev, Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-swan-tr.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "More and more companies use static analysis to perform regular code reviews to detect security vulnerabilities in their code, configuring them to detect various types of bugs and vulnerabilities such as the SANS top 25 or the OWASP top 10. For such analyses to be as precise as possible, they must be adapted to the code base they scan. The particular challenge we address in this paper is to provide analyses with the correct security-relevant methods (Srm): sources, sinks, etc."
    } ,
  
    {
      "title"    : "Gamifying static analysis",
      "title-lower"    : "gamifying static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationspositioncognitive-walkthrough",
      "venue" : "ESEC/FSE New ideas",
      "authors" : "Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-gamifying.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "In the past decades, static code analysis has become a prevalent means to detect bugs and security vulnerabilities in software systems. As software becomes more complex, analysis tools also report lists of increasingly complex warnings that developers need to address on a daily basis. The novel insight we present in this work is that static analysis tools and video games both require users to take on repetitive and challenging tasks. Importantly, though, while good video games manage to keep players engaged, static analysis tools are notorious for their lacking user experience, which prevents developers from using them to their full potential, frequently resulting in dissatisfaction and even tool abandonment. We show parallels between gaming and using static analysis tools, and advocate that the user-experience issues of analysis tools can be addressed by looking at the analysis tooling system as a whole, and by integrating gaming elements that keep users engaged, such as providing immediate and clear feedback, collaborative problem solving, or motivators such as points and badges."
    } ,
  
    {
      "title"    : "VisuFlow: a debugging environment for static analyses",
      "title-lower"    : "visuflow: a debugging environment for static analyses",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsuser-study",
      "venue" : "ICSE Demo",
      "authors" : "Lisa Nguyen Quang Do, Stefan Krüger, Patrick Hill, Karim Ali, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-debugging-demo.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Code developers in industry frequently use static analysis tools to detect and fix software defects in their code. But what about defects in the static analyses themselves? While debugging application code is a difficult, time-consuming task, debugging a static analysis is even harder. We have surveyed 115 static analysis writers to determine what makes static analysis difficult to debug, and to identify which debugging features would be desirable for static analysis."
    } ,
  
    {
      "title"    : "Explainable Static Analysis",
      "title-lower"    : "explainable static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationspositionexplainability",
      "venue" : "SE explainable software",
      "authors" : "Eric Bodden, Lisa Nguyen Quang Do",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-explainable.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static code analysis is an important tool that aids in the early detection of programming errors, e.g. functional flaws, performance bottlenecks or security vulnerabilities. Past research in static analysis has mainly focused on the precise and efficient detection of programming mistakes, allowing new analyses to return more accurate results in a shorter time. However, end-user experience or static analysis tools in industry shows high abandonment rates. Previous work has discovered that current analysis tools are ill-adapted to meet the needs of their users, taking a long time to yield results and causing warnings to be frequently misinterpreted. This can quickly make the overall benefit of static analyses deteriorate."
    } ,
  
    {
      "title"    : "Debugging static analysis (TR)",
      "title-lower"    : "debugging static analysis (tr)",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationssurveyuser-studyVisuFlow",
      "venue" : "Tech report",
      "authors" : "Lisa Nguyen Quang Do, Stefan Krüger, Patrick Hill, Karim Ali, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-debugging-tr.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "To detect and fix bugs and security vulnerabilities, software companies use static analysis as part of the development process. However, static analysis code itself is also prone to bugs. To ensure a consistent level of precision, as analyzed programs grow more complex, a static analysis has to handle more code constructs, frameworks, and libraries that the programs use. While more complex analyses are written and used in production systems every day, the cost of debugging and fixing them also increases tremendously."
    } ,
  
    {
      "title"    : "Just-in-time static analysis",
      "title-lower"    : "just-in-time static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsuser-studyCheetah",
      "venue" : "ISSTA",
      "authors" : "Lisa Nguyen Quang Do, Karim Ali, Benjamin Livshits, Eric Bodden, Justin Smith, Emerson Murphy-Hill",
      "awards" : "Distinguished paper award, Artifact evaluated",
      "tags"     : "",
      "url"      : "/publication-jita.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "We present the concept of Just-In-Time (JIT) static analysis that interleaves code development and bug fixing in an integrated development environment. Unlike traditional batch-style analysis tools, a JIT analysis tool presents warnings to code developers over time, providing the most relevant results quickly, and computing less relevant results incrementally later."
    } ,
  
    {
      "title"    : "Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java",
      "title-lower"    : "boomerang: demand-driven flow- and context-sensitive pointer analysis for java",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationspointer-analysison-demand",
      "venue" : "ECOOP",
      "authors" : "Johannes Späth, Lisa Nguyen Quang Do, Eric Bodden",
      "awards" : "Artifact evaluated",
      "tags"     : "",
      "url"      : "/publication-boomerang.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Many current program analyses require highly precise pointer information about small, targeted parts of a given program. This motivates the need for demand-driven pointer analyses that compute information only where required. Pointer analyses generally compute points-to sets of program variables or answer boolean alias queries. However, many client analyses require richer pointer information. For example, taint and typestate analyses often need to know the set of all aliases of a given variable under a certain calling context. With most current pointer analyses, clients must compute such information through repeated points-to or alias queries, increasing complexity and computation time for them."
    } ,
  
    {
      "title"    : "Cheetah: just-in-time taint analysis for Android apps",
      "title-lower"    : "cheetah: just-in-time taint analysis for android apps",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsuser-study",
      "venue" : "ICSE demo",
      "authors" : "Lisa Nguyen Quang Do, Karim Ali, Benjamin Livshits, Eric Bodden, Justin Smith, Emerson Murphy-Hill",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-cheetah.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Current static-analysis tools are often long-running, which causes them to be sidelined into nightly build checks. As a result, developers rarely use such tools to detect bugs when writing code, because they disrupt their workflow."
    } ,
  
    {
      "title"    : "Just-in-time static analysis (TR)",
      "title-lower"    : "just-in-time static analysis (tr)",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsuser-studyCheetah",
      "venue" : "Tech report",
      "authors" : "Lisa Nguyen Quang Do, Karim Ali, Benjamin Livshits, Eric Bodden, Justin Smith, Emerson Murphy-Hill",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-jita-tr.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "We present the concept of Just-In-Time (JIT) static analysis that interleaves code development and bug fixing in an integrated development environment. Unlike traditional static analysis tools, a JIT analysis tool presents warnings to code developers over time, providing the most relevant results quickly, and computing less relevant results incrementally later. We describe general guidelines for designing JIT analyses. We also present a general recipe for turning static data- flow analyses into JIT analyses through a concept of layered analysis execution illustrated through Cheetah, a JIT taint analysis for Android applications. Our empirical evaluation of Cheetah on real-world applications shows that our approach returns warnings quickly enough to avoid disrupting a developer’s workflow, a finding confirmed by developers in our user study."
    } ,
  
    {
      "title"    : "Toward an automated benchmark management system",
      "title-lower"    : "toward an automated benchmark management system",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsbenchmark",
      "venue" : "SOAP",
      "authors" : "Lisa Nguyen Quang Do, Michael Eichberg, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-abm.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "The systematic evaluation of program analyses as well as software-engineering tools requires benchmark suites that are representative of real-world projects in the domains for which the tools or analyses are designed. Such benchmarks currently only exist for a few research areas and even where they exist, they are often not effectively maintained, due to the required manual effort. This makes evaluating new analyses and tools on software that relies on current technologies often impossible."
    } ,
  
    {
      "title"    : "Security Analysis of TrueCrypt",
      "title-lower"    : "security analysis of truecrypt",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publications",
      "venue" : "BSI / Fraunhofer SIT",
      "authors" : "Mauro Baluda, Andreas Fuchs, Philipp Holzinger, Lisa Nguyen, Lotfi ben Othmane, Andreas Poller, Jürgen Repp, Johannes Späth, Jan Steffan, Stefan Triller, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-truecrypt.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "This report summarizes the results of the TrueCrypt security analysis. As well as uncovering possible vulnerabilities, the aim was also to point out possible areas for improvement during any future developments of the program."
    } ,
  
    {
      "title"    : "Toward a Just-in-Time Static Analysis",
      "title-lower"    : "toward a just-in-time static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "publicationsCheetah",
      "venue" : "Tech report",
      "authors" : "Lisa Nguyen Quang Do, Karim Ali, Benjamin Livshits, Eric Bodden",
      "awards" : "",
      "tags"     : "",
      "url"      : "/publication-toward-jita-tr.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "We present the concept of Just-In-Time (JIT) static analysis that interleaves code development and bug fixing in an integrated development environment. Unlike traditional static analysis tools, a JIT analysis tool presents warnings to code developers over time, providing the most relevant results quickly, and computing less relevant results incrementally later. This paper outlines general guidelines for designing JIT analyses. We also present a general recipe for turning static data-flow analyses into JIT analyses through a concept of layered analysis execution illustrated through Cheetah, a JIT taint analysis for Android applications. Our evaluation of Cheetah on real-world applications and our user study show that JIT analyses are able to present those warnings that are of importance to the code developers just-in-time, allowing them to start fixing problems immediately, without losing their context. Furthermore, study participants consistently reported higher satisfaction levels with Cheetah compared to its traditional counterpart."
    } ,
  
    {
      "title"    : "Developer usage of static analysis tools",
      "title-lower"    : "developer usage of static analysis tools",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsindustry-surveyuser-study",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-usage.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Past research in the usability of static analysis tools has focused on usability issues encountered by software developers, and the causes of those issues in analysis tools. We adopt a user-centered approach, to understand how developers use analysis tools, which decisions they make, what they look for when making those decisions, and the motivations behind their strategies."
    } ,
  
    {
      "title"    : "Explainability of static analysis results",
      "title-lower"    : "explainability of static analysis results",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsrule-graphuser-study",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-explainability.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static analysis tools perform complex reasoning to yield warnings. Explaining this reasoning to the users is a known issue for the tools. We present the concept of analysis automata and detail three applications that enhance explainability: (1) Warning understanding, (2) Warning classification, and (3) Detection of bad analysis patterns."
    } ,
  
    {
      "title"    : "Swan and SwanAssist",
      "title-lower"    : "swan and swanassist",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsconfigurationML",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-swan.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Swan is a semi-automated method for determining which methods of a given codebase or library can be involved in specific vulnerabilities."
    } ,
  
    {
      "title"    : "Gamifying static analysis",
      "title-lower"    : "gamifying static analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsheuristic-walkthrough",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-gamification.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Static analysis tools have well-documented usability issues. In this project, we explore how to build analysis tools that help code developers understand and fix complex bugs, and how to engage them with a comprehensive, user-friendly GUI."
    } ,
  
    {
      "title"    : "VisuFlow",
      "title-lower"    : "visuflow",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectssurveyuser-studyVisuFlow",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-debugging.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "VisuFlow is a debugging environment designed to support static analysis writers understand and debug an analysis. It is written as an Eclipse plugin, and supports static data-flow analyses written on top of the Soot analysis framework."
    } ,
  
    {
      "title"    : "Just in time analysis",
      "title-lower"    : "just in time analysis",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsuser-studyCheetah",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-jita.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "The Just-in-time analysis concept aims at making static analysis more usable to the end user, often the code developer. It allows analysis writers to encode prioritization properties into the analysis. At runtime, certain paths are analyzed before others, allowing important results to be returned first. Cheetah is an implementation of the Just-in-Time analysis concept for taint analysis for Android applications. It is integrated in the Eclipse IDE as a plugin."
    } ,
  
    {
      "title"    : "Automated benchmark management",
      "title-lower"    : "automated benchmark management",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectsbenchmarkmethodology",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-benchmark.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "ABM (automated benchmark management) is a methodology and a web application for automating the creation and maintenance of benchmark suites."
    } ,
  
    {
      "title"    : "Boomerang",
      "title-lower"    : "boomerang",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "projectspointer-analysison-demand",
      "venue" : "",
      "authors" : "",
      "awards" : "",
      "tags"     : "",
      "url"      : "/project-boomerang.html",
      "date"     : "1970-01-01 01:00:00 +0100",
      "excerpt"     : "Boomerang is a demand-driven flow and context-sensitive pointer analysis for Java written in the IFDS framework."
    } 
  ,
  
    {
      "title"    : "UPB doctoral dissertation award",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2020",
      "link"     : "https://www.uni-paderborn.de/fileadmin/neujahrsempfang/Neujahrsempfang2021_Preistraeger.pdf",
      "organization"     : "Paderborn university",
      "url"      : "#upbdoctoraldissertationaward"
    } ,
  
    {
      "title"    : "Zonta club Paderborn award",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2020",
      "link"     : "https://www.uni-paderborn.de/fileadmin/neujahrsempfang/Neujahrsempfang2021_Preistraeger.pdf",
      "organization"     : "Zonta international",
      "url"      : "#zontaclubpaderbornaward"
    } ,
  
    {
      "title"    : "Doctoral thesis – summa cum laude",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2019",
      "link"     : "",
      "organization"     : "Paderborn university",
      "url"      : "#doctoralthesis–summacumlaude"
    } ,
  
    {
      "title"    : "Invited young researcher - 7th Heidelberg laureate forum",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2019",
      "link"     : "https://www.heidelberg-laureate-forum.org/young-researchers.html",
      "organization"     : "Heidelberg laureate forum",
      "url"      : "#invitedyoungresearcher-7thheidelberglaureateforum"
    } ,
  
    {
      "title"    : "ACM SIGSOFT distinguished paper award",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2017",
      "link"     : "https://www.sigsoft.org/awards/distinguishedPaperAward.html",
      "organization"     : "International symposium of software testing and analysis",
      "url"      : "#acmsigsoftdistinguishedpaperaward"
    } ,
  
    {
      "title"    : "Completion of the SciMento mentoring program",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2017",
      "link"     : "https://www.mentoringhessen.de/en/",
      "organization"     : "Mentoring Hessen",
      "url"      : "#completionofthescimentomentoringprogram"
    } ,
  
    {
      "title"    : "First place – PLDI ACM student research competition",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2016",
      "link"     : "https://src.acm.org/candidates/2017",
      "organization"     : "Programming language design and implementation",
      "url"      : "#firstplace–pldiacmstudentresearchcompetition"
    } ,
  
    {
      "title"    : "ISSS excellence award",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2014",
      "link"     : "https://actu.epfl.ch/news/isss-excellence-award-2014-for-lisa-nguyen-quang-4/",
      "organization"     : "Information security society Switzerland",
      "url"      : "#isssexcellenceaward"
    } ,
  
    {
      "title"    : "Finalist – Google Anita Borg scholarship",
      "categories" : "distinctions",
      "tags"     : "",
      "date"     : "2012",
      "link"     : "",
      "organization"     : "Google EMEA",
      "url"      : "#finalist–googleanitaborgscholarship"
    } 
  ,
  
    {
      "title"    : "Graduate teaching assistant",
      "categories" : "decasssessdtechnical-report",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Seminar: secure systems engineering](https://www.hni.uni-paderborn.de/swt/lehre/seminar-secure-systems-engineering-ws-20182019/), Paderborn university (winter 2018). The seminar yielded three technical reports:  - [Security implications of compiler optimizations on cryptography — a review](https://arxiv.org/abs/1907.02530)  - [Integration of the static analysis results interchange format in CogniCrypt](https://arxiv.org/abs/1907.02558)  - [Object-capability as a means of permission and authority in software systems](https://arxiv.org/abs/1907.07154)- [Designing code analyses for large software systems](https://www.hni.uni-paderborn.de/swt/lehre/deca/), Paderborn university (summers 2016-2019)- Secure software development, TU Darmstadt (winter 2015)- Designing code analyses for large software systems, TU Darmstadt (winter 2014)",
      "url"      : "#graduateteachingassistant"
    } ,
  
    {
      "title"    : "Substitute lecturer",
      "categories" : "decassd",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Designing code analyses for large software systems](https://www.hni.uni-paderborn.de/sse/lehre/vorlesungsarchiv/ws-20202021/deca/), Paderborn university (summer 2018)- [Designing code analyses for large software systems](https://www.hni.uni-paderborn.de/sse/lehre/vorlesungsarchiv/ss-2016/deca/), Paderborn university (summer 2016)- Secure software development, TU Darmstadt (winter 2015)",
      "url"      : "#substitutelecturer"
    } ,
  
    {
      "title"    : "Thesis supervision",
      "categories" : "",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- A tool for prototyping static analysis graphical user interfaces. G. S. Varma. (MA)- Automating builds for open source software. Thoren Grüttemeier. (BA)- Omniscient debugging for static analysis. Marcus Nachtigall. (MA)- Indexing open-source JavaScript repositories. Ankur Gupta. (MA)- [Supporting incremental changes in static analysis code](https://www.hni.uni-paderborn.de/sse/lehre/bachelor-masterarbeiten/details/?tx_ttnews%5Btt_news%5D=914&amp;cHash=cf8b4a8413bcb385d42392f7261c16e0). Kaarthik Radhakrishna. (MA)- [Aliasing in incremental static analysis with IDEal](https://www.hni.uni-paderborn.de/sse/lehre/bachelor-masterarbeiten/details/?tx_ttnews%5Btt_news%5D=913&amp;cHash=6525f748341ee14488f99f151a276814). Shashank Subramanya. (MA)",
      "url"      : "#thesissupervision"
    } ,
  
    {
      "title"    : "Student supervision",
      "categories" : "pgucosp",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Project group: Delphi – mining software ecosystems using static program analysis](https://www.hni.uni-paderborn.de/sse/lehre/projektgruppenarchiv/pg-jimpleaid/) (2019 - 2020)- [Project group: automated benchmark management](https://www.hni.uni-paderborn.de/sse/lehre/projektgruppenarchiv/pg-abm/) (2018 - 2019)- [Undergraduate Capstone open source projects: filtering module for the automated benchmark management platform](https://ucosp.ca/) (2018)- [Project group: secure integration of cryptographic software](https://www.hni.uni-paderborn.de/sse/lehre/projektgruppenarchiv/pg-abm/) (2017 - 2018)- [Project group: visualising data flows in static code analyses](https://www.hni.uni-paderborn.de/sse/lehre/projektgruppenarchiv/visuflow/) (2016 - 2017)",
      "url"      : "#studentsupervision"
    } 
  ,
  
    {
      "title"    : "Organizer / chair",
      "categories" : "SOAPISSTAECOOP",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [SOAP 2021](https://pldi21.sigplan.org/home/SOAP-2021), PC chair- [ISSTA &amp; ECOOP 2021](https://conf.researchr.org/committee/ecoop-issta-2021/ecoop-issta-2021-organizing-committee), publicity chair- [ECOOP 2020](https://2020.ecoop.org/track/ecoop-2020-artifacts), artifact evaluation co-chair- [ECOOP 2019](https://2019.ecoop.org/track/ecoop-2019-Posters), posters chair- [ISSTA &amp; ECOOP 2018](https://2018.ecoop.org/track/ecoop-issta-2018-posters), posters chair- [ECOOP 2017](https://2017.ecoop.org/track/ecoop-2017-Doctoral-Symposium), doctoral symposium co-chair",
      "url"      : "#organizer/chair"
    } ,
  
    {
      "title"    : "PC member",
      "categories" : "ICSEISSTAECOOPASEOOPSLAESEC/FSE",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [ISSTA 2022](https://conf.researchr.org/track/issta-2022/issta-2022-doctoral-symposium), doctoral symposium- [ICSE 2022](https://conf.researchr.org/track/icse-2022/icse-2022-posters), posters track- [ISSTA &amp; ECOOP 2021](https://conf.researchr.org/track/ecoop-issta-2021/ecoop-issta-2021-doctoral-symposium), doctoral symposium- [ISSTA 2021](https://conf.researchr.org/track/issta-2021/issta-2021-technical-papers), research track- [ASE 2020](https://conf.researchr.org/track/ase-2020/ase-2020-papers), research track- [ASE 2019](https://2019.ase-conferences.org/track/ase-2019-Demonstrations), demonstrations track- [ISSTA 2019](https://conf.researchr.org/track/issta-2019/issta-2019-Artifact-Evaluation-), artifact evaluation- [ECOOP 2019](https://2019.ecoop.org/track/ecoop-2019-artifacts), artifact evaluation- [ECOOP 2019](https://2019.ecoop.org/track/ecoop-2019-docsymp), doctoral symposium- [OOPSLA 2018](https://2018.splashcon.org/track/splash-2018-OOPSLA-Artifacts), artifact evaluation- [ISSTA 2018](https://conf.researchr.org/track/issta-2018/issta-2018-Artifacts), artifact evaluation- [ASE 2018](https://www.hni.uni-paderborn.de/swt/lehre/deca/), research track (sub-reviewer)- [OOPSLA 2017](https://2017.splashcon.org/track/splash-2017-OOPSLA-Artifacts), artifact evaluation- [ESEC/FSE 2017](http://esec-fse17.uni-paderborn.de/call_tooldemos.php), demonstrations track- [ECOOP 2017](https://2017.ecoop.org/track/ecoop-2017-Artifacts), artifact evaluation- [ESEC/FSE 2016](https://dl.acm.org/doi/proceedings/10.1145/2950290), research track (sub-reviewer)",
      "url"      : "#pcmember"
    } ,
  
    {
      "title"    : "Journal reviewer",
      "categories" : "TOSEMTSEJSSProgramming",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Transactions on Software Engineering and Methodology 2019](https://dl.acm.org/journal/tosem)- [Transactions on Software Engineering 2019](https://www.computer.org/csdl/journal/ts)- [Journal of Systems and Software 2018](https://www.journals.elsevier.com/journal-of-systems-and-software)- [Programming 2018](https://programming-journal.org/)",
      "url"      : "#journalreviewer"
    } ,
  
    {
      "title"    : "Student volunteer",
      "categories" : "ICSEECOOP",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [ICSE 2017](https://icse2017.gatech.edu/)- [ECOOP 2016](https://2016.ecoop.org/home)",
      "url"      : "#studentvolunteer"
    } ,
  
    {
      "title"    : "Others",
      "categories" : "panelistmentor",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [ASE 2020](https://conf.researchr.org/details/ase-2020/ase-2020-social-networking-/4/PhD-Advice), panelist at the PhD advice panel- [Forum EPFL alumni mentoring program 2020](https://www.forum-epfl.ch/en/students/mentoring/), mentor- [ECOOP 2016 summer school](https://2016.ecoop.org/track/Summer+School), graduate mentor",
      "url"      : "#others"
    } 
  ,
  
    {
      "title"    : "Talks",
      "categories" : "FMI",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Filmfestival Mathematik Informatik](https://www.karlstorkino.de/programm/between-the-folds/). Heidelberg. (2019)",
      "url"      : "#talks"
    } ,
  
    {
      "title"    : "Exhibitions",
      "categories" : "ODOUSAEMOZCfC",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [30th international origami convention](https://www.papierfalten.de/jahrestreffen.html). Erkner. (2018)- [Paper heroes](https://www.pgannon.com/apulseuncommon/2017/10/1/museum-show-paper-heroes-the-old-jaffa-museum-old-jaffa-israel). Tel Aviv. (2017)- [Convention for creators](https://www.origami-shop.com/en/convention-creators-what-convention-creators-xsl-2658_286_2347_2349.html). Lyon. (2017)- [Origami USA annual convention](https://origamiusa.org/convention2016). New York. (2016)- [28th international origami convention](https://www.papierfalten.de/jahrestreffen.html). Erkner. (2016)- [Star Wars origami exhibition](http://www.emoz.es/language/en/). Zaragoza. (2016)- [Ultimate Origami Convention](http://ooraa.free.fr/OldSite/LUO9-convention.html). Lyon. (2015)- [Model-making event](http://www.cen-montagnesdugiffre.fr/index.php?option=com_content&amp;view=article&amp;id=7&amp;catid=8&amp;Itemid=466). Samoëns. (2014)",
      "url"      : "#exhibitions"
    } ,
  
    {
      "title"    : "Contests",
      "categories" : "ODMFPPJOAS",
      "tags"     : "",
      "date"     : "",
      "link"     : "",
      "contents"     : "- [Origami Deutschland creation contest](http://kalami-kalami.blogspot.com/2016/05/origami-deutschland-2016.html). **1st place**. (2016)- [Origami Deutschland creation contest](https://origamiusa.org/thefold/article/convention-report-origami-deutschland-2015-bonn). **2nd place**. (2015)- MFPP creation contest. (2015)- 8th JOAS origami model competition. **1st place**, **public&#39;s choice**. (2015)- [MFPP creation contest](http://mfpp-origami.fr/resultats-du-concours-de-pliage-alsace/). **1st place**, **audience award**. (2014)",
      "url"      : "#contests"
    } ,
  
    {
      "title"    : "Creations",
      "categories" : "diagramsCP",
      "tags"     : "",
      "date"     : "",
      "link"     : "https://www.flickr.com/photos/134605846@N05",
      "contents"     : "- Models with diagrams:  - [Black nightshade](https://flic.kr/p/BiLHbj). Diagram in &quot;Origami Deutschland 2016 convention book&quot;. (Nov 2015)  - [Butterfly](https://flic.kr/p/CCjSBx). Diagram in &quot;Origami Deutschland 2018 convention book&quot;. (Dec 2015)  - [Four-leaf clover](https://flic.kr/p/vVt4EM). Diagram in &quot;MFPP 2015 convention book&quot;. (Dec 2014)  - [Goldfish](https://flic.kr/p/DpatwD). Diagram in &quot;CDO 2018 convention book&quot;. (Dec 2017)  - [Ivy leaf](https://flic.kr/p/vUNzpG). Diagram in &quot;[Origami Deutschland 2015 convention book](http://www.papierfalten.de/2015_Bonn.html)&quot; and in MFPP 2015 convention book&quot;. (May 2014)  - [Jar Jar Binks head](https://flic.kr/p/AGHa4b). Diagram in &quot;[The Fold](https://origamiusa.org/thefold/article/diagrams-jar-jar-binks-head)&quot; 2016. (Nov 2015)  - [Leaf chopstick holder](https://flic.kr/p/vT6FPY). Diagram in &quot;[The origami collection 2015](https://origamiusa.org/publications/2015-origami-collection)&quot; and in &quot;[Origami Deutschland 2015 convention book](http://www.papierfalten.de/2015_Bonn.html)&quot;. (May 2014)  - [Monkey mask](https://flic.kr/p/vCR8d9). Diagram in &quot;The Paper&quot; 2018. (Jul 2015)  - [Oncidium](https://flic.kr/p/uYpGsb). Diagram in &quot;Origami Deutschland 2016 convention book&quot;. (Oct 2014)  - [ORI_Q swan](https://flic.kr/p/BBKgPL). Diagram in &quot;[The Fold](https://origamiusa.org/thefold/article/diagrams-ori_q-swan)&quot; 2016. (Nov 2015)  - [Twin dolphins](https://flic.kr/p/vCRecy). Diagram in &quot;[The Fold](https://origamiusa.org/thefold/article/diagrams-twin-dolphins)&quot; 2016. (Apr 2015)  - [Winged heart](https://flic.kr/p/vVsQ4i). Diagram in &quot;The origami collection 2016&quot;. (May 2015)  - [Yale-type cylinder lock key](https://flic.kr/p/vCRfH1). Diagram in &quot;[The Fold](https://origamiusa.org/thefold/article/diagrams-yale-type-cylinder-lock-key)&quot; 2017. (Jan 2015)- Models with crease patterns:  - [Alsatian girl](https://flic.kr/p/vVpYbg). Diagram in &quot;[Le pli #134](https://mfpp-origami.fr/en/publication/le-pli/lepli-134/)&quot; 2014 and in &quot;[The Fold](https://origamiusa.org/thefold/article/crease-pattern-young-alsatian-girl)&quot; 2016. (Apr 2014)  - [Mermaid](https://flic.kr/p/vVsRZT). Diagram in &quot;[Le pli #138](http://mfpp-origami.fr/le-pli-n-138-2015/)&quot; 2015. (Apr 2015)- Other models:  - [13 tales](https://flic.kr/p/GmMTKi). (Apr 2016)  - [2018!](https://flic.kr/p/J76RiM). (Jan 2018)  - [Angelfish](https://flic.kr/p/CmmzAP). (Dec 2015)  - [Ballerina](https://flic.kr/p/27ju1dF). (May 2018)  - [Bride](https://flic.kr/p/vCRr7C). (Apr 2015)  - [Brown bear](https://flic.kr/p/2gLabZw). (Jul 2019)  - [Charon](https://flic.kr/p/uYonZw). (Dec 2012)  - [Cheetah head](https://flic.kr/p/RTrbza). (Jan 2017)  - [Chinese coin](https://flic.kr/p/vCYwv8). (Dec 2014)  - [Cinderella](https://flic.kr/p/Cxzetr). (Jan 2016)  - [Courting cranes](https://flic.kr/p/2gL3hCt). (Feb 2019)  - [Deer head](https://flic.kr/p/U2QHh3). (Apr 2017)  - [Doe head](https://flic.kr/p/SENp75). (Apr 2017)  - [Four mice](https://flic.kr/p/GypGxk). (Apr 2016)  - [Hop-o’-my-thumb](https://flic.kr/p/Fr3ZQU). (Mar 2016)  - [Jar Jar Binks](https://flic.kr/p/BtkDzp). (Nov 2015)  - [Lady](https://flic.kr/p/2877igX). (May 2018)  - [Link](https://flic.kr/p/27nt423). (Jun 2018)  - [Little red riding hood](https://flic.kr/p/DJQmoR). (Feb 2016)  - [Lurking menace](https://flic.kr/p/GFUrHE). (May 2016)  - [Magic mirror](https://flic.kr/p/FbdA9D). (Apr 2016)  - [My little hero](https://flic.kr/p/XonQEx). (Aug 2017)  - [Princess Zelda](https://flic.kr/p/28ML5yy). (Jun 2018)  - [Quetzalcoatl](https://flic.kr/p/uYy8VZ). (Jul 2014)  - [Sadako](https://flic.kr/p/WSrihN). (Aug 2017)  - [Sun Wukong](https://flic.kr/p/uYrSRJ). (Jul 2015)  - [The angel](https://flic.kr/p/E8hRr1). (Mar 2016)  - [The beanstalk](https://flic.kr/p/G1spfs). (Apr 2016)  - [The mermaid and the frog prince](https://flic.kr/p/DnGgvP). (Jan 2016)  - [The pied piper of Hamelin](https://flic.kr/p/DvqE6U). (Jan 2016)  - [The winged victory of Samothrace](https://flic.kr/p/vCMYnu). (May 2013)  - [The yellow dwarf](https://flic.kr/p/FwH2jQ). (Apr 2016)  - [Tinker bell](https://flic.kr/p/EstQbD). (Mar 2016)  - [Two (thousand) cranes](https://flic.kr/p/Btwyu1). (May 2012)  - [Wedding bouquet](https://flic.kr/p/DFamHE). (Feb 2016)  - [Winged heart 2.0](https://flic.kr/p/BuRfmG). (Oct 2015)",
      "url"      : "#creations"
    } 
  
]